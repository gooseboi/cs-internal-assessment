/*
Copyright (c) 2022 Guzman Zugnoni <gooseiman@protonmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
package frontend;

import backend.Client;
import backend.ClientNode;
import static backend.Main.buyOrders;
import static backend.Main.clients;
import static backend.Main.sales;
import static backend.Main.showErrorDialog;
import static backend.Main.showInformationDialog;
import static backend.Main.showYesNoDialog;
import static backend.Main.stocks;
import frontend.tables.ClientsCellRenderer;
import java.text.SimpleDateFormat;
import javax.swing.JFrame;
import static javax.swing.JOptionPane.NO_OPTION;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chonk
 */
public class ManageClients extends javax.swing.JPanel {

    private final JFrame window;

    /**
     * Creates new form ManageClients
     */
    public ManageClients(JFrame window) {
        initComponents();
        this.window = window;
        this.drawTable();
    }

    private void drawTable() {
        ClientNode node = clients.getFirst();
        DefaultTableModel model = (DefaultTableModel) clientsTable.getModel();
        model.setRowCount(0);
        int idx = 0;

        while (node != null) {
            Client client = node.getData();
            String[] curr = new String[4];
            curr[0] = client.getName();
            curr[1] = client.getSurname();
            curr[2] = client.getEmailAddress();
            curr[3] = client.getPhoneNumber();
            ids[idx] = client.getID();
            model.addRow(curr);
            node = node.getNext();
            idx++;
        }

        clientsTable.setModel(model);
    }

    private void drawTable(DrawType type, String val) {
        ClientNode node = clients.getFirst();
        DefaultTableModel model = (DefaultTableModel) clientsTable.getModel();
        model.setRowCount(0);
        int idx = 0;

        while (node != null) {
            Client client = node.getData();
            switch (type) {
                case Name:
                    if (!client.getName().toUpperCase().startsWith(val.toUpperCase())) {
                        node = node.getNext();
                        continue;
                    }
                    break;
                case Surname:
                    if (!client.getSurname().toUpperCase().startsWith(val.toUpperCase())) {
                        node = node.getNext();
                        continue;
                    }
                    break;
                case EmailAddress:
                    if (!client.getEmailAddress().toUpperCase().contains(val.toUpperCase())) {
                        node = node.getNext();
                        continue;
                    }
                    break;
                case PhoneNumber:
                    if (!client.getPhoneNumber().toUpperCase().startsWith(val.toUpperCase())) {
                        node = node.getNext();
                        continue;
                    }
                    break;
            }

            String[] curr = new String[4];
            curr[0] = client.getName();
            curr[1] = client.getSurname();
            curr[2] = client.getEmailAddress();
            curr[3] = client.getPhoneNumber();
            ids[idx] = client.getID();
            model.addRow(curr);
            node = node.getNext();
            idx++;
        }

        clientsTable.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();
        searchTypeComboBox = new javax.swing.JComboBox<>();
        searchTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 500));

        titleLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Manage Clients");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        clientsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Client Name", "Client Surname", "Email Address", "Phone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        clientsTable.getColumnModel().getColumn(0).setCellRenderer(new ClientsCellRenderer());
        clientsTable.getColumnModel().getColumn(1).setCellRenderer(new ClientsCellRenderer());
        clientsTable.getColumnModel().getColumn(2).setCellRenderer(new ClientsCellRenderer());
        clientsTable.getColumnModel().getColumn(3).setCellRenderer(new ClientsCellRenderer());

        clientsTable.getModel().addTableModelListener(
            new TableModelListener()
            {
                public void tableChanged(TableModelEvent evt)
                {
                    onCellChanged(evt);
                }
            });
            jScrollPane1.setViewportView(clientsTable);

            deleteButton.setText("Delete");
            deleteButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    deleteButtonActionPerformed(evt);
                }
            });

            backButton.setText("Back");
            backButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    backButtonActionPerformed(evt);
                }
            });

            searchLabel.setText("Search by:");

            searchTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Surname", "Email Address", "Phone Number"}));
            searchTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchTypeComboBoxActionPerformed(evt);
                }
            });

            searchTextField.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchTextFieldActionPerformed(evt);
                }
            });

            addButton.setText("Add");
            addButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    addButtonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(261, 261, 261)
                            .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(38, 38, 38)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(backButton)
                                    .addGap(127, 127, 127)
                                    .addComponent(searchLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(searchTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(74, 74, 74))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(60, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(461, 461, 461)))
                    .addGap(51, 51, 51))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addButton)
                        .addComponent(searchLabel)
                        .addComponent(searchTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteButton))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                    .addComponent(backButton)
                    .addGap(37, 37, 37))
            );
        }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int idx = clientsTable.getSelectedRow();
        if (idx == -1) {
            showErrorDialog(this, "You must select a client to delete!");
            return;
        }

        if (showYesNoDialog(this, "Are you sure you want to delete the selected client?\n(This will also delete all their sales and buy orders!)") == NO_OPTION) {
            return;
        }
        int id = ids[idx];
        sales.deleteClient(id);
        buyOrders.deleteClient(id);
        if (clients.delete(id)) {
            showInformationDialog(this, "Client succesfully deleted!");
        } else {
            showErrorDialog(this, "Client could not be deleted!");
        }
        this.drawTable();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.window.setContentPane(new MainMenu(window));
        this.window.pack();
    }//GEN-LAST:event_backButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        this.window.setContentPane(new AddClient(window));
        this.window.pack();
    }//GEN-LAST:event_addButtonActionPerformed

    private void searchTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTypeComboBoxActionPerformed
    }//GEN-LAST:event_searchTypeComboBoxActionPerformed

    private void onCellChanged(TableModelEvent evt) {
        if (evt.getType() == TableModelEvent.UPDATE) {
            int row = evt.getFirstRow();
            assert evt.getFirstRow() == evt.getLastRow() : "First row is not last row";
            int col = evt.getColumn();
            Client client = clients.getByID(ids[row]);
            String val = (String) clientsTable.getValueAt(row, col);
            switch (col) {
                case 0:
                    if (val == null || val.isBlank() || val.isEmpty()) {
                        showErrorDialog(this, "Name must not be empty!");
                        return;
                    } else if (val.matches(".*\\d+.*")) {
                        showErrorDialog(this, "Name must not contain numbers!");
                        return;
                    }
                    client.setName(val);
                    break;
                case 1:
                    if (val == null || val.isBlank() || val.isEmpty()) {
                        showErrorDialog(this, "Surname must not be empty!");
                        return;
                    } else if (val.matches(".*\\d+.*")) {
                        showErrorDialog(this, "Surname must not contain numbers!");
                        return;
                    }
                    client.setSurname(val);
                    break;
                case 2:
                    if (val == null || val.isBlank() || val.isEmpty()) {
                        showErrorDialog(this, "Email Address must not be empty!");
                        return;
                    } else if (!val.matches("[\\w\\.]+@(.+\\.)+(.+)")) {
                        showErrorDialog(this, "Invalid email adress!");
                        return;
                    }
                    client.setEmailAddress(val);
                    break;
                case 3:
                    if (val == null || val.isBlank() || val.isEmpty()) {
                        showErrorDialog(this, "Phone Number must not be empty!");
                        return;
                    } else if (!val.matches("[0-9 \\-]+")) {
                        showErrorDialog(this, "Invalid phone number!");
                        return;
                    }
                    client.setPhoneNumber(val);
                    break;
            }
            if (clients.modify(client)) {
                showInformationDialog(this, "Client successfuly modified!");
            } else {
                showErrorDialog(this, "Client could not be modified");
            }
            this.drawTable();
        }
    }

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        String val = searchTextField.getText();
        if (val == null || val.isEmpty() || val.isBlank()) {
            this.drawTable();
            return;
        }
        switch ((String) searchTypeComboBox.getSelectedItem()) {
            case "Name":
                this.drawTable(DrawType.Name, val);
                break;
            case "Surname":
                this.drawTable(DrawType.Surname, val);
                break;
            case "Email Address":
                this.drawTable(DrawType.EmailAddress, val);
                break;
            case "Phone Number":
                this.drawTable(DrawType.PhoneNumber, val);
                break;
        }
    }//GEN-LAST:event_searchTextFieldActionPerformed

    enum DrawType {
        Name,
        Surname,
        EmailAddress,
        PhoneNumber,
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTable clientsTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JComboBox<String> searchTypeComboBox;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    // Wrong
    private int[] ids = new int[clients.size()];
    // Actual end of variable declaration
}
