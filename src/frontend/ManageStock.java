/*
Copyright (c) 2022 Guzman Zugnoni <gooseiman@protonmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
package frontend;

import javax.swing.JFrame;
import static backend.Main.stocks;
import static backend.Main.buyOrders;
import backend.OrderList;
import backend.StockList;
import backend.StockNode;
import frontend.tables.StocksCellRenderer;
import frontend.tables.StocksHeaderRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author chonk
 */
public class ManageStock extends javax.swing.JPanel {

    private final JFrame window;
    private final StockList localStock;

    /**
     * Creates new form ManageOrders
     */
    public ManageStock(JFrame window) {
        initComponents();
        this.window = window;
        stocksTable.getColumnModel().getColumn(0).setCellRenderer(new StocksCellRenderer());
        stocksTable.getColumnModel().getColumn(1).setCellRenderer(new StocksCellRenderer());
        stocksTable.getColumnModel().getColumn(2).setCellRenderer(new StocksCellRenderer());
        stocksTable.getColumnModel().getColumn(3).setCellRenderer(new StocksCellRenderer());
        stocksTable.getColumnModel().getColumn(4).setCellRenderer(new StocksCellRenderer());
        JTableHeader h = stocksTable.getTableHeader();
        h.setDefaultRenderer(new StocksHeaderRenderer(stocksTable));

        localStock = stocks.clone();
        orderDescending = true;
        mode = StockOrderMode.Name;
        sortDirectionButton.setText("⬇");
        nameRadioButton.setSelected(true);

        this.sortList();
        this.drawTable();
    }

    private void drawTable() {
        StockNode node = localStock.getFirst();
        DefaultTableModel model = (DefaultTableModel) stocksTable.getModel();
        model.setRowCount(0);
        while (node != null) {
            String[] curr = new String[5];
            curr[0] = node.getData().getPlant().getName();
            curr[1] = String.valueOf(node.getData().getStock());
            curr[2] = node.getData().getPlant().getGrowthCondition();
            curr[3] = String.valueOf(node.getData().getPlant().getPrice());
            OrderList l = buyOrders.getOrdersByPlant(node.getData().getPlant());
            curr[4] = String.valueOf(l.accumulateStock());

            model.addRow(curr);
            node = node.getNext();
        }

        stocksTable.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortButtonGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stocksTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        totalRadioButton = new javax.swing.JRadioButton();
        priceRadioButton = new javax.swing.JRadioButton();
        buyOrdersRadioButton = new javax.swing.JRadioButton();
        sortLabel = new javax.swing.JLabel();
        nameRadioButton = new javax.swing.JRadioButton();
        sortDirectionButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 500));

        titleLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Manage Stock");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        stocksTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        stocksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plant Name", "Total Available", "Growth Conditions", "Price per unit", "Buy Orders"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stocksTable);
        if (stocksTable.getColumnModel().getColumnCount() > 0) {
            stocksTable.getColumnModel().getColumn(0).setResizable(false);
            stocksTable.getColumnModel().getColumn(1).setResizable(false);
            stocksTable.getColumnModel().getColumn(2).setResizable(false);
            stocksTable.getColumnModel().getColumn(3).setResizable(false);
            stocksTable.getColumnModel().getColumn(4).setResizable(false);
        }

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        searchLabel.setText("Search:");

        sortButtonGroup.add(totalRadioButton);
        totalRadioButton.setText("Available");
        totalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalRadioButtonActionPerformed(evt);
            }
        });

        sortButtonGroup.add(priceRadioButton);
        priceRadioButton.setText("Price");
        priceRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceRadioButtonActionPerformed(evt);
            }
        });

        sortButtonGroup.add(buyOrdersRadioButton);
        buyOrdersRadioButton.setText("Buy Orders");
        buyOrdersRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyOrdersRadioButtonActionPerformed(evt);
            }
        });

        sortLabel.setText("Sort By:");

        sortButtonGroup.add(nameRadioButton);
        nameRadioButton.setText("Name");
        nameRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameRadioButtonActionPerformed(evt);
            }
        });

        sortDirectionButton.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        sortDirectionButton.setText("⬇");
        sortDirectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortDirectionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addGap(119, 119, 119)
                                .addComponent(nameRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(sortLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(sortDirectionButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(totalRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(priceRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buyOrdersRadioButton)))))))
                .addContainerGap(38, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTextField)
                .addGap(18, 18, 18)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(154, 154, 154))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(deleteButton)
                    .addComponent(searchLabel)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(backButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sortLabel)
                            .addComponent(sortDirectionButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalRadioButton)
                            .addComponent(priceRadioButton)
                            .addComponent(buyOrdersRadioButton)
                            .addComponent(nameRadioButton))))
                .addGap(37, 37, 37))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.window.setContentPane(new MainMenu(window));
        this.window.pack();
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selected = stocksTable.getSelectedRow();
        stocks.delete(selected);
        DefaultTableModel model = (DefaultTableModel) stocksTable.getModel();
        model.removeRow(selected);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        this.window.setContentPane(new AddStock(window));
        this.window.pack();
    }//GEN-LAST:event_addButtonActionPerformed

    private void priceRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceRadioButtonActionPerformed
        mode = StockOrderMode.Price;
        sortList();
        drawTable();
    }//GEN-LAST:event_priceRadioButtonActionPerformed

    private void sortDirectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortDirectionButtonActionPerformed
        orderDescending = !orderDescending;
        if (orderDescending) {
            sortDirectionButton.setText("⬇");
        } else {
            sortDirectionButton.setText("⬆");
        }
        sortList();
        drawTable();
    }//GEN-LAST:event_sortDirectionButtonActionPerformed

    private void totalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalRadioButtonActionPerformed
        mode = StockOrderMode.Available;
        sortList();
        drawTable();
    }//GEN-LAST:event_totalRadioButtonActionPerformed

    private void nameRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameRadioButtonActionPerformed
        mode = StockOrderMode.Name;
        sortList();
        drawTable();
    }//GEN-LAST:event_nameRadioButtonActionPerformed

    private void buyOrdersRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyOrdersRadioButtonActionPerformed
        mode = StockOrderMode.BuyOrders;
        sortList();
        drawTable();
    }//GEN-LAST:event_buyOrdersRadioButtonActionPerformed

    private void sortList() {
        switch (mode) {
            case Name:
                localStock.sortByName(orderDescending);
                break;
            case Available:
                localStock.sortByAvailable(orderDescending);
                break;
            case Price:
                localStock.sortByPrice(orderDescending);
                break;
            case BuyOrders:
                //localStock.sortByBuyOrders(orderDescending);
                break;
        }
    }

    enum StockOrderMode {
        Name,
        Available,
        Price,
        BuyOrders,
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JRadioButton buyOrdersRadioButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton nameRadioButton;
    private javax.swing.JRadioButton priceRadioButton;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.ButtonGroup sortButtonGroup;
    private javax.swing.JButton sortDirectionButton;
    private javax.swing.JLabel sortLabel;
    private javax.swing.JTable stocksTable;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JRadioButton totalRadioButton;
    // End of variables declaration//GEN-END:variables

    // Wrong
    private boolean orderDescending;
    private StockOrderMode mode;
    // Actual end of variable declarations
}
