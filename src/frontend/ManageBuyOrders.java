/*
Copyright (c) 2022 Guzman Zugnoni <gooseiman@protonmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
package frontend;

import backend.BuyOrder;
import backend.BuyOrderNode;
import static backend.Main.buyOrders;
import static backend.Main.sales;
import static backend.Main.showErrorDialog;
import static backend.Main.showInformationDialog;
import static backend.Main.showYesNoDialog;
import static backend.Main.stocks;
import backend.OrderNode;
import backend.Plant;
import backend.Sale;
import backend.Stock;
import frontend.tables.BuyOrderCellRenderer;
import java.text.SimpleDateFormat;
import javax.swing.JFrame;
import static javax.swing.JOptionPane.NO_OPTION;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chonk
 */
public class ManageBuyOrders extends javax.swing.JPanel {

    private final JFrame window;

    /**
     * Creates new form ManageOrders
     */
    public ManageBuyOrders(JFrame window) {
        initComponents();
        this.window = window;
        this.drawTable();
    }

    private void drawTable() {
        BuyOrderNode node = buyOrders.getFirst();
        int i = 0;
        DefaultTableModel model = (DefaultTableModel) buyOrdersTable.getModel();
        model.setRowCount(0);
        SimpleDateFormat formatter = new SimpleDateFormat("E d/M/y");
        while (node != null) {
            Object[] curr = new Object[4];
            BuyOrder buyOrder = node.getData();
            curr[0] = String.valueOf(buyOrder.getClient().getName());
            curr[1] = buyOrder.getOrders().accumulatePrice();
            curr[2] = buyOrder.getOrders().accumulateStock();
            curr[3] = formatter.format(buyOrder.getDate());
            ids[i] = buyOrder.getId();

            model.addRow(curr);
            node = node.getNext();
            i++;
        }

        buyOrdersTable.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        buyOrdersTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        soldButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 500));

        titleLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Manage Buy Orders");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        buyOrdersTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buyOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Client Name", "Total Price", "Number Ordered", "Date Ordered"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        buyOrdersTable.getColumnModel().getColumn(0).setCellRenderer(new BuyOrderCellRenderer());
        buyOrdersTable.getColumnModel().getColumn(1).setCellRenderer(new BuyOrderCellRenderer());
        buyOrdersTable.getColumnModel().getColumn(2).setCellRenderer(new BuyOrderCellRenderer());
        buyOrdersTable.getColumnModel().getColumn(3).setCellRenderer(new BuyOrderCellRenderer());
        jScrollPane1.setViewportView(buyOrdersTable);
        if (buyOrdersTable.getColumnModel().getColumnCount() > 0) {
            buyOrdersTable.getColumnModel().getColumn(0).setResizable(false);
            buyOrdersTable.getColumnModel().getColumn(1).setResizable(false);
            buyOrdersTable.getColumnModel().getColumn(2).setResizable(false);
            buyOrdersTable.getColumnModel().getColumn(3).setResizable(false);
        }

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        modifyButton.setText("Modify");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        soldButton.setText("Mark as Sold");
        soldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soldButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(backButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(titleLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(modifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(soldButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(addButton)
                    .addComponent(modifyButton)
                    .addComponent(soldButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(backButton)
                .addGap(37, 37, 37))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.window.setContentPane(new MainMenu(window));
        this.window.pack();
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selected = buyOrdersTable.getSelectedRow();
        if (selected == -1) {
            showErrorDialog(this, "You must select a buy order to delete!");
            return;
        }

        if (showYesNoDialog(this, "Are you sure you want to delete the selected buy order?") == NO_OPTION) {
            return;
        }

        int id = ids[selected];
        if (buyOrders.delete(id)) {
            showInformationDialog(this, "Buy Order successfully deleted");
        } else {
            showErrorDialog(this, "Could not delete Buy Order");
        }

        DefaultTableModel model = (DefaultTableModel) buyOrdersTable.getModel();
        model.removeRow(selected);    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        this.window.setContentPane(new AddBuyOrder(window));
        this.window.pack();
    }//GEN-LAST:event_addButtonActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        int idx = buyOrdersTable.getSelectedRow();
        if (idx == -1) {
            showErrorDialog(this, "You must select a buy order to modify!");
            return;
        }
        int id = ids[idx];
        BuyOrder b = buyOrders.getByID(id);
        this.window.setContentPane(new EditBuyOrder(window, b));
        this.window.pack();
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void soldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soldButtonActionPerformed
        int idx = buyOrdersTable.getSelectedRow();
        if (idx == -1) {
            showErrorDialog(this, "You must select a buy order to mark!");
        }
        BuyOrder b = buyOrders.getByID(ids[idx]);
        Sale s = b.toSale();

        if (!buyOrders.delete(b)) {
            showErrorDialog(this, "Could not delete buy order!");
            return;
        }

        if (sales.insert(s)) {
            showInformationDialog(this, "Succesfully marked as a sale!");
        } else {
            showErrorDialog(this, "Could not mark as a sale!");
            return;
        }

        // TODO: Refactor this
        OrderNode node = s.getOrders().getFirst();
        while (node != null) {
            Plant p = node.getData().getPlant();
            Stock st = stocks.getStockByPlant(p);
            int currStock = st.getStock();
            int num = node.getData().getNum();
            if (currStock < num) {
                currStock = 0;
            } else {
                currStock -= num;
            }
            st.setStock(currStock);
            stocks.modify(st);
            node = node.getNext();
        }
        DefaultTableModel model = (DefaultTableModel) buyOrdersTable.getModel();
        model.removeRow(idx);
    }//GEN-LAST:event_soldButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTable buyOrdersTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyButton;
    private javax.swing.JButton soldButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    // Wrong
    int ids[] = new int[buyOrders.size()];
    // Actual end of variable declarations
}
