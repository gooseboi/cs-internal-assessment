/*
Copyright (c) 2022 Guzman Zugnoni <gooseiman@protonmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
package frontend;

import backend.BuyOrder;
import backend.Client;
import backend.ClientList;
import backend.ClientNode;
import static backend.Main.buyOrders;
import static backend.Main.clients;
import javax.swing.JFrame;
import backend.OrderList;
import java.util.Date;
import javax.swing.DefaultListModel;
import static backend.Main.showErrorDialog;
import static backend.Main.showInformationDialog;
import static backend.Main.showYesNoDialog;
import static backend.Main.showYesNoCancelDialog;
import static javax.swing.JOptionPane.CANCEL_OPTION;
import static javax.swing.JOptionPane.NO_OPTION;
import static javax.swing.JOptionPane.YES_OPTION;

/**
 *
 * @author chonk
 */
public class EditBuyOrder extends javax.swing.JPanel {

    private final JFrame window;
    private final BuyOrder buyOrder;
    private final OrderList orders;
    private boolean localChange = false;

    /**
     * Creates new form DeleteSale
     */
    public EditBuyOrder(JFrame window, BuyOrder b) {
        initComponents();
        this.window = window;
        this.buyOrder = b;
        this.orders = b.getOrders().clone();
        this.clientSearchTextField.setText(b.getClient().getName());
        this.datePerformedDatePicker.setDate(b.getDate());
        drawList(clients);
        clientList.setSelectedIndex(this.findIdx(b.getId()));
    }

    public EditBuyOrder(JFrame window, BuyOrder b, OrderList orders) {
        initComponents();
        this.window = window;
        this.buyOrder = b;
        this.orders = orders;
        this.clientSearchTextField.setText(b.getClient().getName());
        this.datePerformedDatePicker.setDate(b.getDate());
        drawList(clients);
        clientList.setSelectedIndex(this.findIdx(b.getId()));
        localChange = true;
    }

    private void drawList() {
        drawList(localClients);
    }

    private void drawList(ClientList cs) {
        ClientNode node = cs.getFirst();
        DefaultListModel<String> model = (DefaultListModel) clientList.getModel();
        model.clear();
        int i = 0;
        int idx = -1;
        while (node != null) {
            Client c = node.getData();
            model.addElement(c.getName() + ' ' + c.getSurname() + '-' + c.getEmailAddress());
            if (buyOrder.getClient().equals(c)) {
                idx = i;
            }
            ids[i++] = c.getID();
            node = node.getNext();
        }
        clientList.setModel(model);
        if (idx != -1) {
            clientList.setSelectedIndex(idx);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        ordersLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        editOrders = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        datePerformedDatePicker = new org.jdesktop.swingx.JXDatePicker();
        clientSearchLabel = new javax.swing.JLabel();
        clientSearchTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        clientList = new javax.swing.JList<>();

        setPreferredSize(new java.awt.Dimension(754, 480));

        titleLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Edit Buy Order");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        ordersLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ordersLabel.setText("Orders:");

        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateLabel.setText("Date:");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        editOrders.setText("Edit...");
        editOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOrdersActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        datePerformedDatePicker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                datePerformedDatePickerMouseClicked(evt);
            }
        });

        clientSearchLabel.setText("Search for a client:");

        clientSearchTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                clientSearchTextFieldCaretUpdate(evt);
            }
        });
        clientSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientSearchTextFieldActionPerformed(evt);
            }
        });

        clientList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        clientList.setModel(new DefaultListModel());
        clientList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                clientListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(clientList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ordersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(datePerformedDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clientSearchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(159, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(289, 289, 289))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ordersLabel)
                    .addComponent(editOrders)
                    .addComponent(clientSearchLabel)
                    .addComponent(clientSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(datePerformedDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(backButton))
                .addGap(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (localChange) {
            switch (showYesNoCancelDialog(window, "Unsaved changes detected!\n Would you like to save them?")) {
                case YES_OPTION:
                    if (!this.save()) {
                        return;
                    }
                    break;
                case NO_OPTION:
                    break;
                case CANCEL_OPTION:
                    return;
            }
        }
        this.window.setContentPane(new ManageSales(window));
        this.window.pack();
    }//GEN-LAST:event_backButtonActionPerformed

    private void editOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOrdersActionPerformed
        this.window.setContentPane(new EditOrder(window, buyOrder, orders));
        this.window.pack();
    }//GEN-LAST:event_editOrdersActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (!this.save()) {
            return;
        }
        this.window.setContentPane(new ManageBuyOrders(window));
        this.window.pack();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void datePerformedDatePickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datePerformedDatePickerMouseClicked
        localChange = true;
    }//GEN-LAST:event_datePerformedDatePickerMouseClicked

    private void clientSearchTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_clientSearchTextFieldCaretUpdate
        String text = clientSearchTextField.getText();
        if (text == null || text.isBlank() || text.isEmpty()) {
            drawList(clients);
            return;
        }

        localClients = clients.searchAllFields(text);
        size = localClients.size();
        if (size == 0) { // Empty list
            if (showYesNoDialog(this, "Client has not been found!\n Would you like to add them?\n(This will keep the added orders)") == YES_OPTION) {
                this.window.setContentPane(new AddClient(window, text, orders));
                this.window.pack();
            }
            return;
        }
        drawList();
        if (size == 1) {
            clientList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_clientSearchTextFieldCaretUpdate

    private void clientSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientSearchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientSearchTextFieldActionPerformed

    private void clientListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_clientListValueChanged
        localChange = true;
    }//GEN-LAST:event_clientListValueChanged

    private Client getSelectedClient() {
        int selected = clientList.getSelectedIndex();
        if (selected == -1)
            return null;

        return clients.getByID(ids[selected]);
    }

    private int findIdx(int id) {
        for (int i = 0; i < ids.length; i++) {
            if (ids[i] == id) {
                return i;
            }
        }
        return -1;
    }

    private boolean save() {
        Client c = getSelectedClient();
        if (c == null) {
            showErrorDialog(this, "You must select a client to associate the buy order with!");
            return false;
        }

        if (buyOrder.getOrders().size() == 0) {
            showErrorDialog(this, "You must add some orders!");
            return false;
        }

        Date d = datePerformedDatePicker.getDate();
        if (d == null) {
            showErrorDialog(this, "You must select a date for the buy order!");
            return false;
        } else if (d.before(new Date())) {
            showErrorDialog(this, "Date cannot be in the future!");
            return false;
        }

        BuyOrder b = new BuyOrder(c, d, orders, buyOrder.getId());
        if (buyOrders.modify(b)) {
            showInformationDialog(this, "Buy Order successfully modified!");
            localChange = false;
            return true;
        } else {
            showErrorDialog(this, "Buy Order could not be modified");
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JList<String> clientList;
    private javax.swing.JLabel clientSearchLabel;
    private javax.swing.JTextField clientSearchTextField;
    private javax.swing.JLabel dateLabel;
    private org.jdesktop.swingx.JXDatePicker datePerformedDatePicker;
    private javax.swing.JButton editOrders;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel ordersLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    // Wrong
    private ClientList localClients;
    int size;
    private int[] ids = new int[clients.size()];
    // Actual end of variable declaration
}
